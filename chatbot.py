# -*- coding: utf-8 -*-





"""GPT4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YeEL34_huFJO6KCH0R0rE7kqwHPb_etk
"""

# !pip -q install crewai duckduckgo-search langchain_groq

from crewai import Crew, Agent, Task, Process
from langchain_community.tools import DuckDuckGoSearchRun


search_tool = DuckDuckGoSearchRun()


import json  # Import the JSON module to parse JSON strings
from typing import Union, List, Tuple, Dict
from langchain.schema import AgentFinish


from langchain_groq import ChatGroq
GROQ_LLM = ChatGroq(
    api_key="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",
    model="llama3-70b-8192"
)


class GPT4Agents():
  def Engineer_Scholar(self):
    return Agent(
        role='Answer to all questions related to Mumbai University engineering syllabus ',
        goal="""take prompts of questios from the user and give perfect answer to those questions such that the answers score full marks\
        You have knowledge about all the subjects in engineering that Mumbai University provides and you can answer to all the questions\
        If the question isn't in the Mumbai University Engineering syllabus then reply you are contacting wrong person
        """,
        backstory="""You are a engineering topper from Mumbai University and you know every answer to all the questions that have appeared in exams and scored full marks""",
        verbose=True,
        llm=GROQ_LLM,
        allow_delegation=False,
        memory=True,
        # step_callback=lambda x: print_agent_output(x,"Answers By Scholar"),
    )

class GPT4Tasks():
  # Define your tasks with descriptions and expected outputs
  def answer_the_questions(self, a, q):
      return Task(
        description=f"""Conduct a comprehensive analysis of the question asked and answer the questions like an expert\
        Give answers ready to write in exams \
        Give point wise answers. \
        Keep the answers accurate and precise \
        If any teacher reads the answer than she will give full marks as per required by Mumbai University
        Question:\n\n {q} \n\n
        Output: accurate answer""",
        expected_output=""" An accurate answer given point wise Answer: \

        - Point 1
        - Point 2
        - Point 3
        - Point 4
        """,
        output_file=f"",
        agent= a
      )



def crew(questions):
    agents = GPT4Agents()
    tasks = GPT4Tasks()

    Engineer_Scholar = agents.Engineer_Scholar()
    answer_the_questions = tasks.answer_the_questions(a = Engineer_Scholar,q = questions)

    from crewai import Crew, Process

    # Instantiate your crew with a sequential process
    return Crew(
        agents=[Engineer_Scholar],
        tasks=[answer_the_questions],
        verbose=2,
        process=Process.sequential,
        full_output=True,
        share_crew=False,
        # step_callback=lambda x: print_agent_output(x,"MasterCrew Agent")
    )


# questions = "Explain architecture of microprocessor 8086"

# Kick off the crew's work
# results = crew(questions).kickoff()

# print(results)


# pip install telegram
# pip install python-telegram-bot

from typing import Final
from telegram import Update #Core package, provides classes and methods for interacting with the Telegram Bot API directly.
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes #It builds on top of the core telegram package and provides additional functionalities to simplify bot development.
import random
TOKEN: Final='7038887900:AAEFnqDhrjkXjZUqT0nLiiNorLrVcumlE98'
BOT_USERNAME: Final = '@MU_ScholarBot'


# async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     # chat_id = update.message.chat_id
#     await update.message.reply_text('This Bot will answer to all your questions related to your Engineering.')
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # chat_id = update.message.chat_id
    await update.message.reply_text('Hello, Welcome! \n This Bot will answer to all your questions related to your Engineering.')

async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    questions = update.message.text
    results = crew(questions).kickoff()
    await update.message.reply_text(results["final_output"])

# async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     chat_id = update.message.chat_id
    

import _thread

if __name__ == '__main__':
    print("Starting bot...")
    app = Application.builder().token(TOKEN).build()
    # app.start(welcome)
    app.add_handler(CommandHandler('start', start_command))
    # app.add_handler(CommandHandler('clear', clear_chat))
    app.add_handler(MessageHandler(filters.TEXT, answer_question))
    

    print('Polling')
    app.run_polling(poll_interval=3)




# Print the results
# print("Crew Work Results:")
# print(results)

# print(f"Categorize Email: {categorize_email.output}")
# print(results.usage_metrics)